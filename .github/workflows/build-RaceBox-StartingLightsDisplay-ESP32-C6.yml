name: Build RaceBox-StartingLightsDisplay ESP32-C6 Firmware

on:
  push:
    branches:
      - main
      - 'feat/*'
    paths:
      - 'RaceBox-StartingLightsDisplay/**'
      - '.github/workflows/build-RaceBox-StartingLightsDisplay-ESP32-C6.yml'
      - 'dev-tools/github-workflow-files/flasher/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
        # Optional: token: ${{ secrets.GITHUB_TOKEN }} falls für private Repos oder Push nötig

      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v2
        #with:
        #  version: 0.35.0 # Unbedingt diese Versionsangabe verwenden!

      - name: Install ESP32 Board Manager
        run: |
          arduino-cli core update-index
          arduino-cli core install esp32:esp32

      - name: Install Custom Libraries from Zips
        run: |
          CUSTOM_LIBS_ZIP_DIR="./RaceBox-StartingLightsDisplay/libraries" # Aktualisierter Pfad für dich
          ARDUINO_CLI_LIB_DIR="$HOME/Arduino/libraries" # Das Standard-Bibliotheksverzeichnis der Arduino CLI
          
          # Sicherstellen, dass die Verzeichnisse existieren
          mkdir -p "${ARDUINO_CLI_LIB_DIR}"
          if [ ! -d "${CUSTOM_LIBS_ZIP_DIR}" ]; then
            echo "Fehler: '${CUSTOM_LIBS_ZIP_DIR}' Verzeichnis nicht gefunden."
            exit 1
          fi

          echo "Starte Installation der benutzerdefinierten Bibliotheken aus ${CUSTOM_LIBS_ZIP_DIR}..."

          # Iteriere über jede ZIP-Datei und entpacke sie in das Arduino CLI Bibliotheksverzeichnis
          for zip_file in "${CUSTOM_LIBS_ZIP_DIR}"/*.zip; do
            if [ -f "$zip_file" ]; then # Sicherstellen, dass es wirklich eine Datei ist
              LIB_NAME=$(basename "$zip_file" .zip) # Extrahiert den Namen der Bibliothek (ohne .zip)
              echo "Entpacke und installiere Bibliothek: ${LIB_NAME} von $(basename "$zip_file")..."
              
              # Entpacke die ZIP-Datei direkt in das Arduino CLI Bibliotheksverzeichnis
              # Der Pfad nach -d muss der Ordner sein, in dem die Bibliothek nach dem Entpacken liegen soll
              unzip -q "$zip_file" -d "${ARDUINO_CLI_LIB_DIR}"
              
              if [ $? -ne 0 ]; then
                echo "Fehler: Entpacken von $(basename "$zip_file") fehlgeschlagen."
                exit 1 # Den Build abbrechen, wenn das Entpacken fehlschlägt
              fi
            fi
          done
          echo "Installation der benutzerdefinierten Bibliotheken abgeschlossen."
          
          # Liste alle installierten Bibliotheken auf, um zu debuggen
          echo "Installierte Bibliotheken nach diesem Schritt:"
          arduino-cli lib list

      - name: Install ArduinoWebsockets Library
        run: |
          arduino-cli lib install "ArduinoWebsockets"

      - name: Install ArduinoJson Library
        run: |
          arduino-cli lib install "ArduinoJson"

      - name: Compile ESP32 Sketch
        run: |
          # Define a clear build output directory
          BUILD_OUTPUT_DIR="build_output"
          
          arduino-cli compile \
            --fqbn esp32:esp32:esp32c6 \
            --build-path ${BUILD_OUTPUT_DIR} \
            ./RaceBox-StartingLightsDisplay/

      - name: Create Artifact Directory
        run: |
          SUB_DIR="RaceBox-StartingLightsDisplay-ESP32-C6"
          mkdir -p artifact_package/${SUB_DIR}/bin
          mkdir -p artifact_package/${SUB_DIR}/windows
          mkdir -p artifact_package/${SUB_DIR}/linux
        #mkdir -p artifact_package/${SUB_DIR}/osx

      - name: Move compiled binaries to Artifact Directory
        run: |
          BUILD_OUTPUT_DIR="build_output"
          SUB_DIR="RaceBox-StartingLightsDisplay-ESP32-C6"
          TARGET_BIN_DIR="./artifact_package/${SUB_DIR}/bin"
          INO_FILE="RaceBox-StartingLightsDisplay.ino"
          find ./${BUILD_OUTPUT_DIR}/ -name "${INO_FILE}.bin" -exec mv {} ${TARGET_BIN_DIR}/ \;
          find ./${BUILD_OUTPUT_DIR}/ -name "${INO_FILE}.bootloader.bin" -exec mv {} ${TARGET_BIN_DIR}/ \;
          find ./${BUILD_OUTPUT_DIR}/ -name "${INO_FILE}.partitions.bin" -exec mv {} ${TARGET_BIN_DIR}/ \;
          find ~ -name "boot_app0.bin" -exec mv {} ${TARGET_BIN_DIR}/ \;

      - name: copy esptool and Flash Scripts to Artifact Package
        run: |
          SUB_DIR="RaceBox-StartingLightsDisplay-ESP32-C6"
          cp ./dev-tools/github-workflow-files/flasher/windows/ESP32-C6_RaceBox-StartingLightsDisplay.ps1 ./artifact_package/${SUB_DIR}/windows/
          cp ./dev-tools/github-workflow-files/flasher/windows/esptool.exe ./artifact_package/${SUB_DIR}/windows/
          cp ./dev-tools/github-workflow-files/flasher/windows/README.md ./artifact_package/${SUB_DIR}/windows/
          cp ./dev-tools/github-workflow-files/flasher/linux/ESP32-C6_RaceBox-StartingLightsDisplay.sh ./artifact_package/${SUB_DIR}/linux/
          cp ./dev-tools/github-workflow-files/flasher/linux/esptool ./artifact_package/${SUB_DIR}/linux/
        #cp ./dev-tools/github-workflow-files/flasher/osx/ESP32-C6_RaceBox-StartingLightsDisplay.sh ./artifact_package/${SUB_DIR}/osx/
        #cp ./dev-tools/github-workflow-files/flasher/osx/esptool ./artifact_package/${SUB_DIR}/osx/

      - name: lst package content
        run: |
          echo "Content of Artefakt-Package:"
          ls -lR ./artifact_package/

      - name: Generate Timestamp
        id: timestamp_gen
        run: echo "BUILD_DATE=$(date +'%Y%m%d%H%M%S')" >> "$GITHUB_OUTPUT"

      - name: Upload Binaries as Artifact
        uses: actions/upload-artifact@v4
        with:
          path: artifact_package
          #name: ${{ steps.timestamp_gen.outputs.BUILD_DATE }}-RaceBox-StartingLightsDisplay-ESP32-C6
          name: RaceBox-StartingLightsDisplay-ESP32-C6
          retention-days: 7