name: Build RaceBox-GhostCar ESP32-C3 Firmware

on:
  push:
    branches:
      - main
      - 'feat/*'
    paths:
      - 'RaceBox-GhostCar/**'
      - '.github/workflows/build-RaceBox-GhostCar-ESP32-C3-NoPoti.yml'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          # Optional: token: ${{ secrets.GITHUB_TOKEN }} falls für private Repos oder Push nötig

      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v2
        #with:
        #  version: 0.35.0 # Unbedingt diese Versionsangabe verwenden!

      - name: Install ESP32 Board Manager
        run: |
          arduino-cli core update-index
          arduino-cli core install esp32:esp32

      - name: Install Custom Libraries from Zips
        run: |
          CUSTOM_LIBS_ZIP_DIR="./RaceBox-GhostCar/libraries" # Aktualisierter Pfad für dich
          ARDUINO_CLI_LIB_DIR="$HOME/.arduino-cli/libraries" # Das Standard-Bibliotheksverzeichnis der Arduino CLI
          
          # Sicherstellen, dass die Verzeichnisse existieren
          mkdir -p "${ARDUINO_CLI_LIB_DIR}"
          if [ ! -d "${CUSTOM_LIBS_ZIP_DIR}" ]; then
            echo "Fehler: '${CUSTOM_LIBS_ZIP_DIR}' Verzeichnis nicht gefunden."
            exit 1
          fi

          echo "Starte Installation der benutzerdefinierten Bibliotheken aus ${CUSTOM_LIBS_ZIP_DIR}..."

          # Iteriere über jede ZIP-Datei und entpacke sie in das Arduino CLI Bibliotheksverzeichnis
          for zip_file in "${CUSTOM_LIBS_ZIP_DIR}"/*.zip; do
            if [ -f "$zip_file" ]; then # Sicherstellen, dass es wirklich eine Datei ist
              LIB_NAME=$(basename "$zip_file" .zip) # Extrahiert den Namen der Bibliothek (ohne .zip)
              echo "Entpacke und installiere Bibliothek: ${LIB_NAME} von $(basename "$zip_file")..."
              
              # Entpacke die ZIP-Datei direkt in das Arduino CLI Bibliotheksverzeichnis
              # Der Pfad nach -d muss der Ordner sein, in dem die Bibliothek nach dem Entpacken liegen soll
              unzip -q "$zip_file" -d "${ARDUINO_CLI_LIB_DIR}"
              
              if [ $? -ne 0 ]; then
                echo "Fehler: Entpacken von $(basename "$zip_file") fehlgeschlagen."
                exit 1 # Den Build abbrechen, wenn das Entpacken fehlschlägt
              fi

              # Optional: Wenn die ZIP-Datei einen zusätzlichen Oberordner enthält, 
              # muss dieser möglicherweise entfernt werden.
              # Beispiel: ZIP enthält 'MyLib-1.0/src/MyLib.h'
              # unzip entpackt zu ~/.arduino-cli/libraries/MyLib-1.0/
              # arduino-cli erwartet aber ~/.arduino-cli/libraries/MyLib/
              # Hier ein Beispiel, falls das passiert (Pfade anpassen!)
              # if [ -d "${ARDUINO_CLI_LIB_DIR}/${LIB_NAME}/${LIB_NAME}" ]; then
              #   mv "${ARDUINO_CLI_LIB_DIR}/${LIB_NAME}/${LIB_NAME}"/* "${ARDUINO_CLI_LIB_DIR}/${LIB_NAME}/"
              #   rmdir "${ARDUINO_CLI_LIB_DIR}/${LIB_NAME}/${LIB_NAME}"
              #   echo "  -> Zusätzlichen Unterordner korrigiert für ${LIB_NAME}"
              # fi

            fi
          done
          echo "Installation der benutzerdefinierten Bibliotheken abgeschlossen."
          
          # Liste alle installierten Bibliotheken auf, um zu debuggen
          echo "Installierte Bibliotheken nach diesem Schritt:"
          arduino-cli lib list

      - name: Install ArduinoWebsockets Library
        run: |
          arduino-cli lib install "ArduinoWebsockets"

      - name: Install ArduinoJson Library
        run: |
          arduino-cli lib install "ArduinoJson"

      - name: Modify Sketch Defines
        run: |
          CONFIG_FILE="./RaceBox-GhostCar/config.h" # Pfad Konfigurationsdatei
          echo "Passe ESP32-Definitionen in ${CONFIG_FILE} an..."

          # Zeile '#define ESP32C3' aktivieren (entkommentieren, falls auskommentiert)
          sed -i 's/^[[:space:]]*\/\/#[[:space:]]*define ESP32C3/#define ESP32C3/g' "${CONFIG_FILE}"
          echo "-> '#define ESP32C3' aktiviert."

          # Zeile '#define ESP32S3' deaktivieren (auskommentieren, falls aktiv)
          sed -i 's/^#[[:space:]]*define ESP32S3/\/\/#define ESP32S3/g' "${CONFIG_FILE}"
          echo "-> '#define ESP32S3' deaktiviert."
          
          # Zeile 'define SPEED_POT_PIN' auskommentieren
          sed -i 's/^[[:space:]]*#[[:space:]]*define SPEED_POT_PIN/\/\/#define SPEED_POT_PIN/g' "${CONFIG_FILE}"
          echo "-> 'SPEED_POT_PIN' ist nun auskommentiert."

          # Zeile 'define STARTING_LIGHTS' auskommentieren
          sed -i 's/^[[:space:]]*#[[:space:]]*define STARTING_LIGHTS/\/\/#define STARTING_LIGHTS/g' "${CONFIG_FILE}"
          echo "-> 'STARTING_LIGHTS' ist nun auskommentiert."
          
          # Optional: Änderungen im Log anzeigen
          echo "Angepasster Sketch-Inhalt (Auszug Definitionen):"
          grep -E "define ESP32C3|define ESP32S3|define SPEED_POT_PIN|define STARTING_LIGHTS" "${CONFIG_FILE}" || true

      - name: Compile ESP32-C3 Sketch
        run: |
          # Define a clear build output directory
          BUILD_OUTPUT_DIR="build_output"
          
          arduino-cli compile --fqbn esp32:esp32:esp32c3 --build-path ${BUILD_OUTPUT_DIR} ./RaceBox-GhostCar/

      - name: Create Artifact Directory
        run: |
             mkdir -p artifact_package/bin
             mkdir -p artifact_package/windows
             mkdir -p artifact_package/linux
        #mkdir -p artifact_package/osx

      - name: Move compiled binaries to Artifact Directory
        run: |
          BUILD_OUTPUT_DIR="build_output"
          TARGET_BIN_DIR="./artifact_package/bin"
          INO_FILE="RaceBox-GhostCar.ino"
          find ./${BUILD_OUTPUT_DIR}/ -name "${INO_FILE}.bin" -exec mv {} ${TARGET_BIN_DIR}/ \;
          find ./${BUILD_OUTPUT_DIR}/ -name "${INO_FILE}.bootloader.bin" -exec mv {} ${TARGET_BIN_DIR}/ \;
          find ./${BUILD_OUTPUT_DIR}/ -name "${INO_FILE}.partitions.bin" -exec mv {} ${TARGET_BIN_DIR}/ \;
          find ~ -name "boot_app0.bin" -exec mv {} ${TARGET_BIN_DIR}/ \;

      - name: copy esptool and Flash Scripts to Artifact Package
        run: |
          cp ./dev-tools/github-workflow-files/flasher/windows/ESP32-C3-RaceBox-GhostCar.ps1 ./artifact_package/windows/
          cp ./dev-tools/github-workflow-files/flasher/windows/esptool.exe ./artifact_package/windows/
          cp ./dev-tools/github-workflow-files/flasher/linux/ESP32-C3_RaceBox-GhostCar.sh ./artifact_package/linux/
          cp ./dev-tools/github-workflow-files/flasher/linux/esptool ./artifact_package/linux/
        #cp ./dev-tools/github-workflow-files/flasher/osx/ESP32-C3_RaceBox-GhostCar.sh ./artifact_package/osx/
        #cp ./dev-tools/github-workflow-files/flasher/osx/esptool ./artifact_package/osx/

      - name: lst package content
        run: |
          echo "Content of Artefakt-Package:"
          ls -lR ./artifact_package/

      - name: Generate Timestamp
        id: timestamp_gen
        run: echo "BUILD_DATE=$(date +'%Y%m%d%H%M%S')" >> "$GITHUB_OUTPUT"

      - name: Upload Binaries as Artifact
        uses: actions/upload-artifact@v4
        with:
          path: artifact_package 
          #name: ${{ steps.timestamp_gen.outputs.BUILD_DATE }}-RaceBox-GhostCar-ESP32-C3-NoPoti
          name: RaceBox-GhostCar-ESP32-C3-NoPoti
          retention-days: 7