name: Build RaceBox ESP32-DEV Firmware

on:
  push:
    branches:
      - main
      - 'feat/*'
    paths:
      - 'RaceBox/**'
      - '.github/workflows/build-RaceBox-ESP32-DEV.yml'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
        # Optional: token: ${{ secrets.GITHUB_TOKEN }} falls für private Repos oder Push nötig

      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v2
        #with:
        #  version: 0.35.0 # Unbedingt diese Versionsangabe verwenden!

      - name: Install ESP32 Board Manager
        run: |
          arduino-cli core update-index
          arduino-cli core install esp32:esp32

      - name: Install ArduinoWebsockets Library
        run: |
          arduino-cli lib install "ArduinoWebsockets"

      - name: Install ArduinoJson Library
        run: |
          arduino-cli lib install "ArduinoJson"

      - name: Compile ESP32 Sketch
        run: |
          # Define a clear build output directory
          BUILD_OUTPUT_DIR="build_output"
          
          arduino-cli compile --fqbn esp32:esp32:esp32 --build-path ${BUILD_OUTPUT_DIR} ./RaceBox/

      - name: Create Artifact Directory
        run: |
             mkdir -p artifact_package/bin
             mkdir -p artifact_package/windows
             mkdir -p artifact_package/linux
        #mkdir -p artifact_package/osx

      - name: Move compiled binaries to Artifact Directory
        run: |
          BUILD_OUTPUT_DIR="build_output"
          TARGET_BIN_DIR="./artifact_package/bin"
          INO_FILE="RaceBox.ino"
          find ./${BUILD_OUTPUT_DIR}/ -name "${INO_FILE}.bin" -exec mv {} ${TARGET_BIN_DIR}/ \;
          find ./${BUILD_OUTPUT_DIR}/ -name "${INO_FILE}.bootloader.bin" -exec mv {} ${TARGET_BIN_DIR}/ \;
          find ./${BUILD_OUTPUT_DIR}/ -name "${INO_FILE}.partitions.bin" -exec mv {} ${TARGET_BIN_DIR}/ \;
          find ~ -name "boot_app0.bin" -exec mv {} ${TARGET_BIN_DIR}/ \;

      - name: copy esptool and Flash Scripts to Artifact Package
        run: |
          cp ./dev-tools/github-workflow-files/flasher/windows/ESP32-DEV_RaceBox.ps1 ./artifact_package/windows/
          cp ./dev-tools/github-workflow-files/flasher/windows/esptool.exe ./artifact_package/windows/
          cp ./dev-tools/github-workflow-files/flasher/windows/README.md ./artifact_package/windows/
          cp ./dev-tools/github-workflow-files/flasher/linux/ESP32-DEV_RaceBox.sh ./artifact_package/linux/
          cp ./dev-tools/github-workflow-files/flasher/linux/esptool ./artifact_package/linux/
        #cp ./dev-tools/github-workflow-files/flasher/osx/ESP32-DEV_RaceBox.sh ./artifact_package/osx/
        #cp ./dev-tools/github-workflow-files/flasher/osx/esptool ./artifact_package/osx/

      - name: lst package content
        run: |
          echo "Content of Artefakt-Package:"
          ls -lR ./artifact_package/

      - name: Generate Timestamp
        id: timestamp_gen
        run: echo "BUILD_DATE=$(date +'%Y%m%d%H%M%S')" >> "$GITHUB_OUTPUT"

      - name: Upload Binaries as Artifact
        uses: actions/upload-artifact@v4
        with:
          path: artifact_package
          #name: ${{ steps.timestamp_gen.outputs.BUILD_DATE }}-RaceBox-ESP32-DEV
          name: RaceBox-ESP32-DEV
          retention-days: 7